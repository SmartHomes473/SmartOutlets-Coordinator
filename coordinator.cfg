/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty_min.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* ================ System configuration ================ */
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
System.SupportProxy = SysCallback;
System.maxAtexitHandlers = 0;

/* Remove debug strings from the application */
Text.isLoaded = false;

/* Remove the raise hook from the application */
Error.raiseHook = null;

/* System stack size (used by ISRs and Swis) */
Program.stack = 512;

/* ================ Kernel configuration ================ */
/* Use Custom library with no logging or asserts */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/* Do not create a heap for dynamic allocations */
BIOS.heapSize = 512;

/* Do not allow dynamic creation of kernel objects */
BIOS.runtimeCreatesEnabled = false;

/* Do allow Swis in the system */
BIOS.swiEnabled = false;

/* Do not check Task or System stacks  */
Task.checkStackFlag = false;
Hwi.checkStackFlag = false;

/* Reduce the number of Task priorities */
Task.numPriorities = 4;

/* Reduce the default stack size */
Task.defaultStackSize = 512;

/* Do not create an Idle thread */
Task.enableIdleTask = true;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
Semaphore.supportsEvents = true;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "rfm12b_sem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.rfm12b_sem = Semaphore.create(null, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "outletTaskQueue_sem";
Program.global.outletTaskQueue_sem = Semaphore.create(0, semaphore1Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "taskQueue_mutex";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.taskQueue_mutex = Semaphore.create(1, semaphore2Params);
var queue0Params = new Queue.Params();
queue0Params.instance.name = "outletTask_queue";
Program.global.outletTask_queue = Queue.create(queue0Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "rfm12b_hwi";
Program.global.rfm12b_hwi = Hwi.create(33, "&RFM12B_ISR", hwi0Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "sopsMessageId_sem";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.sopsMessageId_sem = Semaphore.create(1, semaphore3Params);
var task0Params = new Task.Params();
task0Params.instance.name = "outletTaskHandler_task";
task0Params.priority = 2;
Program.global.outletTaskHandler_task = Task.create("&outlet_task_handler", task0Params);
Clock.tickMode = Clock.TickMode_DYNAMIC;
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "xbeeRxBuffer_mutex";
semaphore4Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.xbeeRxBuffer_mutex = Semaphore.create(1, semaphore4Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "xbeeTxBuffer_mutex";
semaphore5Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.xbeeTxBuffer_mutex = Semaphore.create(1, semaphore5Params);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "xbeeTxTask_sem";
semaphore6Params.mode = Semaphore.Mode_COUNTING;
Program.global.xbeeTxTask_sem = Semaphore.create(null, semaphore6Params);
var semaphore7Params = new Semaphore.Params();
semaphore7Params.instance.name = "xbeeRxTask_sem";
semaphore7Params.mode = Semaphore.Mode_BINARY;
Program.global.xbeeRxTask_sem = Semaphore.create(null, semaphore7Params);
var semaphore8Params = new Semaphore.Params();
semaphore8Params.instance.name = "xbeeTxReady_sem";
semaphore8Params.mode = Semaphore.Mode_BINARY;
Program.global.xbeeTxReady_sem = Semaphore.create(null, semaphore8Params);
var semaphore9Params = new Semaphore.Params();
semaphore9Params.instance.name = "xbeeRxReady_sem";
semaphore9Params.mode = Semaphore.Mode_BINARY;
Program.global.xbeeRxReady_sem = Semaphore.create(null, semaphore9Params);
var task1Params = new Task.Params();
task1Params.instance.name = "xbeeRx_task";
task1Params.vitalTaskFlag = false;
task1Params.priority = 3;
Program.global.xbeeRx_task = Task.create("&XBEE_RX_task", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "xbeeTx_task";
task2Params.priority = 3;
task2Params.vitalTaskFlag = false;
Program.global.xbeeTx_task = Task.create("&XBEE_TX_task", task2Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "xbeeRxTx_hwi";
Program.global.xbeeRxTx_hwi = Hwi.create(43, "&XBEE_TX_RX_ISR", hwi1Params);
var task3Params = new Task.Params();
task3Params.instance.name = "smrtCtl_task";
Program.global.smrtCtl_task = Task.create("&SMRTCTL_task", task3Params);
var semaphore10Params = new Semaphore.Params();
semaphore10Params.instance.name = "rn41RxBuffer_mutex";
semaphore10Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rn41RxBuffer_mutex = Semaphore.create(1, semaphore10Params);
var semaphore11Params = new Semaphore.Params();
semaphore11Params.instance.name = "rn41TxBuffer_mutex";
semaphore11Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.rn41TxBuffer_mutex = Semaphore.create(1, semaphore11Params);
var semaphore12Params = new Semaphore.Params();
semaphore12Params.instance.name = "rn41TxTask_sem";
Program.global.rn41TxTask_sem = Semaphore.create(null, semaphore12Params);
var semaphore13Params = new Semaphore.Params();
semaphore13Params.instance.name = "rn41TxReady_sem";
semaphore13Params.mode = Semaphore.Mode_BINARY;
Program.global.rn41TxReady_sem = Semaphore.create(null, semaphore13Params);
var semaphore14Params = new Semaphore.Params();
semaphore14Params.instance.name = "rn41RxReady_sem";
semaphore14Params.mode = Semaphore.Mode_BINARY;
Program.global.rn41RxReady_sem = Semaphore.create(null, semaphore14Params);
var heapMem0Params = new HeapMem.Params();
heapMem0Params.instance.name = "defaultHeap";
heapMem0Params.size = 1024;
Program.global.defaultHeap = HeapMem.create(heapMem0Params);
HeapMem.common$.instanceHeap = Program.global.defaultHeap;
